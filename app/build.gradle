apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //ARouter路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.runner
    androidTestImplementation rootProject.ext.dependencies.espresso_core

    if (!rootProject.ext.module_home.toBoolean()) {
        implementation project(':module_home')
    }
    implementation project(':module_component_base')
    //implementation依赖是不可以传递的，只能再模块内有效
    //api 和compile是一样的，对外公开，两者的区别在于是否影响其他模块编译
    //annotationProcessor是注解处理器，在编译阶段处理注解的工具
    //路由注解处理器
    annotationProcessor rootProject.ext.dependencies.arouter_compiler
    implementation rootProject.ext.dependencies.arouter_api

}
