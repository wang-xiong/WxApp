JAVA
一、类加载机制
Person person = new Person();
1、因为new用到了Person.class，所以要先找到Person.class文件，并加载到内存中
2、执行该类中的static代码块，如果有的话给Person类进行初始化
3、在堆内存中开辟空间分配内存地址
4、在堆内存中建立对象的特有属性，并进行默认初始化
5、对属性进行显示初始化
6、对对象进行构造代码块初始化
7、对对象进行与对应构造函数初始化
8、将内存地址赋值给栈内存的person变量

JAM将类加载分为三个步骤：装载（load）、链接（Link）、初始化（Initialize）
链接又分为三个步骤：验证、准备、解析
1）装载：查找并加载类的二进制数据
2）链接：
验证：确保被加载类的正确性
准备：为类的静态变量分配内存，并将其初始化为默认值
解析：把类中的符号引用解析为直接引用
3）初始化：为类的静态变量赋正确的初始值

类什么时候初始化：
1、创建类的实例，也就是new一个对象
2、调用某个类或者接口的静态变量、或者对该静态变量赋值
3、调用类的静态方法
4、反射
5、初始化一个类的子类（后首先初始化子类的父类）
6、JVM启动表明的启动类，即文件名和类名相同的那个类

加载类的方式：
1）从本地系统直接加载
2）通过网络下载class文件
3）从zip，jar等归档文件中加载.class文件
4）从专有数据库中提取class文件
5）将Java源文件动态编译为.class文件

类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，
然后在堆区创建一个这个类的java.lang.Class对象，用来封装类在方法区类的对象。

类加载的最终产品：堆中的Class对象

类加载器
双亲委托机制
Android类加载器：DexClassLoader

JVM包括四个部分：
1、类加载器：在JVM启动时或者类运行时将需要的class加载到JVM中
2、执行引擎：负责执行class文件中包含的字节码文件
3、内存区（运行时数据区）：
1）方法区：用于存储类结构信息的地方，包括常量池，静态变量，构造函数等
2）java堆区（heap）：存储java对象的或者实例的地方。GC的主要区域，方法区很堆区被所有线程共享
3）java栈区（stack）：java栈区和线程相关联，每创建一个线程，JVM就会为这个线程创建一个对应的栈区，线程私有的
java栈包含多个栈帧，每运行一个方法，就创建一个栈帧，用于存储局部变量，操作栈，方法返回值等。每个方法从调用直到运行结束
的过程，就对应一个栈帧在java栈中从入栈到出栈的过程。
4）程序计数器（PC Register）：用于保存当前线程执行的内存地址，由于JVM程序是多线程执行的（线程轮流切换），
所以为了保证线程切换回来后，还能恢复到原先状态，就需要一个独立的计数器，记录之前中断的地方，可见程序计数器也是线程私有的
5）本地方法栈（Native Method Stack）:和java栈的作用差不多，只不过是为JVM使用到的native方法服务的。


