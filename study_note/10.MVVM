Android常用模式：
MVC、MVP、MVVM
MVC:
    View：对应于xml布局文件
    Model：实体模型
    Controllor：对应于Activity业务逻辑，数据处理和UI处理
MVP:
    View: 对应于Activity和xml，负责View的绘制以及与用户交互
    Model: 依然是实体模型
    Presenter: 负责完成View于Model间的交互和业务逻辑
MVVM:
    View: 对应于Activity和xml，负责View的绘制以及与用户交互
    Model: 实体模型
    ViewModel: 负责完成View于Model间的交互,负责业务逻辑

Data Binding是一种框架，mvvm是一种模式

Data Binding:
是一个数据和ui绑定的框架，是mvvm模式的一个工具，
ViewModel和View可以通过DataBinding来实现单向绑定和双向绑定，这套UI和数据之间的动态监听和动态更新的框架Google已经帮我们做好了。
在MVVM模式中ViewModel和View是用绑定关系来实现的，所以有了DataBinding 使我们构建Android MVVM 应用程序成为可能。



优点：
1.双向绑定技术，当Model变化时，View-Model会自动更新，View也会自动变化。很好做到数据的一致性，不用担心，在模块的这一块数据是这个值，在另一块就是另一个值了。所以 MVVM模式有些时候又被称作：model-view-binder模式。
2.View的功能进一步的强化，具有控制的部分功能，若想无限增强它的功能，甚至控制器的全部功几乎都可以迁移到各个View上（不过这样不可取，那样View干了不属于它职责范围的事情）。View可以像控制器一样具有自己的View-Model.
3.由于控制器的功能大都移动到View上处理，大大的对控制器进行了瘦身。不用再为看到庞大的控制器逻辑而发愁了。
4.可以对View或ViewController的数据处理部分抽象出来一个函数处理model。这样它们专职页面布局和页面跳转，它们必然更一步的简化。
缺点：
1.故障难定位:数据绑定使得bug很难被调试，界面异常了，有可能是你的view代码有bug，业有可能是model代码有问题。
数据绑定使得一个位置的bug被快速传递到别的位置，要定位原始问题就比较难了
2.内存占用大：一个大的模块中，model也会很大，虽然使用方便保证了数据的一致性，当长期持有，不释放内存，就造成了花费更多的内存
3.数据的绑定不利于代码的重用，数据双向的绑定技术，让你的一个view都绑定了一个model，不同模块的model都不同，就不能简单的重用view

