APT(Annotation Processing Tool)
一、Annotation
1.元注解：用来定义定义注解的注解，共用四种原注解：@Retention, @Target, @Inherited, @Documented
2.@Retention：保留的范围：默认CLASS,
SOURCE：只在源码中可用
CLASS：在源码和字节码中可用
RUNTIME：在源码，字节码，运行时都可用
3.@Retention：用来修饰哪些程序元素
TYPE, METHOD, CONSTRUCTOR, FIELD, PARAMETER等，未标注则表示可修饰所有
4.@Inherited 是否可以被继承，默认为false
5.@Documented 是否会保存到 Javadoc 文档中
二、AbstractProcessor
注解处理
1.init:初始化，可以得到processingEnvironment
2.getSupportedAnnotationTypes:指定这个注解器是注册给那个注解的
3.getSupportedSourceVersion:指定使用的Java版本
4.process:可以在这里写扫描、评估和处理注解的代码，生成Java文件
三、auto-service
介绍下依赖库auto-service,在使用注解处理器需要先声明，步骤：
    a、需要在 processors 库的 main 目录下新建 resources 资源文件夹；
    b、在 resources文件夹下建立 META-INF/services 目录文件夹；
    c、在 META-INF/services 目录文件夹下创建 javax.annotation.processing.Processor 文件；
    d、在 javax.annotation.processing.Processor 文件写入注解处理器的全称，包括包路径；）
这样声明下来也太麻烦了？
这就是用引入auto-service的原因。通过auto-service中的@AutoService可以自动生成AutoService注解处理器是Google开发的，
用来生成 META-INF/services/javax.annotation.processing.Processor 文件的
implementation 'com.google.auto.service:auto-service:1.0-rc2'
四、JavaPoet
implementation 'com.squareup:javapoet:1.10.0'
注解生成Java文件的方式，一种是直接用StringBuilder直接拼接写代码
还有一种是使用JavaPoet，调用对应api生成。


