apply plugin: 'com.android.application'

//buildscript {
//    repositories {
//        maven {
//            url uri('../repo')
//        }
//    }
//
//    dependencies {
//        classpath 'com.wx.plugin.example.plugin:plugin_test:1.1.0'
//    }
//}
//例7
apply plugin: 'test-plugin'

////定义外部参数，pluginExt nestExt等相关参数都是在test-plugin插件中定义的
pluginExt {
    param1 = 'app param1'
    nestExt {
        nestParam1 = 'app nestParam1'
    }
}

android {
    compileSdkVersion 28



    defaultConfig {
        applicationId "com.example.app_gradle_plugin"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

//例1=========
//configurations {
//    myDependency
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    //myDependency 'com.android.support:appcompat-v7:28.0.0'
}

//Gradle自定义依赖组
//task testMyDependecy() {
//    group 'wx'
//    println configurations.myDependency.asPath
//}


//例2=========
//自定义Property
//ext.prperty1 = 'zhangsan'
//ext {
//    property2 = 'zhangsan'
//}

//project.version

//例3=========
//1.创建Task===========
//(1)
//task helloTask() {
//    group = 'wx'
//    println("hello my Task")
//}
//(2)
//this.tasks.create(name: 'helloTask1')
//helloTask1.group = 'wx'
////(3)
//task helloTask(group: "wx", description: 'task test') {
//    println("hello my Task")
//}
//(4)
//task helloTask() {
//    setGroup('wx')
//    setDescription('task test')
//    println("hello my Task")
//}
//(5)
//task copyFileTask(type: Copy) {
//    setGroup('wx')
//    from "src/main/AndroidManifest.xml"
//    into 'src/main/test'
//    rename { String fileName ->
//        fileName = "AndroidManifestTest.xml"
//    }
//    println("copyFileTask final")
//}
//
//例4=========
//2.Task常用方法===========
//helloTask.doFirst {
//    println("hello my Task doFirst")
//}
//
//helloTask.doLast {
//    println("hello my Task doLast")
//}
////
//helloTask << {
//    println("hello my Task <<")
//}
//
//例5========
//3.tasK执行顺序
task taskX(){
    group 'wx'
    doLast{
        println("taskX")
    }
}
task taskY(){
    group 'wx'
    doLast{
        println("taskY")
    }
}
//(1)
//task taskZ(dependsOn:[taskX,taskY]){
//    group 'wx'
//    doLast{
//        println("taskZ")
//    }
//}
//(2)
task taskZ(){
    group 'wx'
    doLast{
        println("taskZ")
    }
}
//taskZ.dependsOn(taskX,taskY)
//这中taskX,taskY的执行顺序是随机的.
//动态指定依赖,因为有时候创建的时候并不知道要依赖谁.

//(3)afterEvaluate使用
//afterEvaluate在配置阶段执行完,所有的task都会被创建成功了.
//统计task执行阶段时长的功能
def startBuildTime, endBuildTime
this.afterEvaluate {
        //保证要找的task都已经配置完毕
    Project project ->
        //找到最开始执行的task
        def preBuildTask = project.tasks.getByPath('preBuild')
        preBuildTask.doFirst {
            startBuildTime = System.currentTimeMillis()
        }
        //找到最后执行的task
        def buildTask = project.tasks.getByPath('build')
        buildTask.doLast {
            endBuildTime = System.currentTimeMillis()
            println("build的时间差:::${endBuildTime - startBuildTime}")
        }
}

//例6========
//自定义plugin
apply plugin: MyPlugin
class MyPlugin implements Plugin<Project> {

    @Override
    void apply(Project target) {
        target.extensions.create("dateAndTime", DateAddTimePluginExtension)

        target.task('showTime') << {
            println("current time is:" + new Date().format(target.dateAndTime.timeFormat))
        }
        target.showTime.group = 'wx'

        target.tasks.create('showData') << {
            println("current date is:" + new Date().format(target.dateAndTime.dateFormat))
        }
        target.showData.group = 'wx'
    }
}

class DateAddTimePluginExtension {
    String timeFormat = "MM/dd/yyyyHH:mm:ss.SSS"
    String dateFormat = "yyyy-MM-dd"
}
//dateAndTime {
//    timeFormat = 'HH:mm:ss.SSS'
//    dateFormat = 'MM/dd/yyyy'
//}

//每个Gradle的Project都维护了一个ExtenionContainer，我们可以通过project.extentions进行访问，
// 比如读取额外的Property和定义额外的Property等